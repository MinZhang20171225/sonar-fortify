/*
 * Fortify Plugin for SonarQube
 * Copyright (C) 2014 Vivien HENRIET and SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonar.fortify.fvdl.handler;

import org.sonar.fortify.base.handler.AbstractSetHandler;

import org.sonar.fortify.base.FortifyUtils;
import org.sonar.fortify.fvdl.element.InstanceInfo;
import org.sonar.fortify.fvdl.element.SourceLocation;
import org.sonar.fortify.fvdl.element.Unified;
import org.sonar.fortify.fvdl.element.Vulnerability;

public class VulnerabilityHandler extends AbstractSetHandler<Vulnerability> {
  private final ClassInfoHandler classInfoHandler;
  private final InstanceInfoHandler instanceInfoHandler;
  private final AnalysisInfoHandler analysisInfoHandler;

  VulnerabilityHandler() {
    super("Vulnerability");
    this.classInfoHandler = new ClassInfoHandler();
    this.instanceInfoHandler = new InstanceInfoHandler();
    this.analysisInfoHandler = new AnalysisInfoHandler();
    setChildren(this.classInfoHandler, this.instanceInfoHandler, this.analysisInfoHandler);
  }

  @Override
  protected void end() {
    Vulnerability vulnerability = new Vulnerability();
    vulnerability.setClassID(this.classInfoHandler.getResult());
    InstanceInfo instanceInfo = this.instanceInfoHandler.getResult();
    if (instanceInfo != null) {
      vulnerability.setInstanceID(instanceInfo.getInstanceID());
      String instanceSeverity = instanceInfo.getInstanceSeverity();
      if (instanceSeverity != null) {
        vulnerability.setInstanceSeverity(FortifyUtils.fortifyToSonarQubeSeverity(instanceSeverity));
      }
    }
    Unified unified = this.analysisInfoHandler.getResult();
    if (unified != null) {
      SourceLocation sourceLocation = unified.getSourceLocation();
      if (sourceLocation != null) {
        vulnerability.setPath(sourceLocation.getPath());
        vulnerability.setLine(sourceLocation.getLine());
      }
      vulnerability.setReplacementDefinitions(unified.getReplacementDefinitions());
    }
    add(vulnerability);
  }
}
